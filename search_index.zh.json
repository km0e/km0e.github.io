[{"url":"https://blog.101248.xyz/net-cpp/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/blog/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/blog/wildcard-domain-name/","title":"通配符域名证书","description":"ACME 从 Google Domains 获取通配符域名证书","body":"获取Google云服务的b64MacKey和KeyID\n获取Google云服务的b64MacKey和KeyID\n打开google云服务，选择API和服务\n \n点击右上角的Shell\n \n成功后输入以下命令\n\n得到b64MacKey和KeyID\n使用acme.sh申请证书\n安装acme.sh到～/.acme.sh\n\n注册账号\n\n由于域名托管在Cloudflare，所以需要添加环境变量\n首先在Cloudflare上拿到Global API Key\n \n在account.conf中添加\n\n申请证书\n\n可以设置默认证书的CA\n\n更新证书\n\n"},{"url":"https://blog.101248.xyz/blog/kvm/","title":"KVM","description":"KVM 安装 虚拟机 及相关配置","body":"相关\nvirbr0 桥接网络配置\nvirbr0 是 libvirt 默认创建的桥接网络接口，允许虚拟机通过宿主机的网络连接到外部网络。它通常配置为 NAT 模式，这意味着虚拟机可以访问外部网络，但外部网络无法直接访问虚拟机。\n配置文件位于 /etc/libvirt/qemu/networks/default.xml。\n环境\n检查CPU虚拟化支持\n\n输出大于0表示支持。\n安装相关软件包\nDebian/Ubuntu\n\nManjaro\n\n添加当前用户到 libvirt 和 kvm 组\n\n检查并启动 libvirtd 服务与默认网络\n\n安装Ubuntu虚拟机\n下载Ubuntu ISO\n\n国内镜像\n\n\n准备硬盘\n\n配置\n创建 user-data 文件：\n\n按实际情况修改 hostname、users 和 chpasswd。\n创建 meta-data 空文件\n\n生成 seed 文件\n\n创建虚拟机\n\n\n\n--name：虚拟机名称\n--os-variant：操作系统版本\n--vcpus：虚拟CPU数量\n--ram：内存大小（MB）\n--location：安装介质路径（ISO文件路径）\n--network：网络配置，这里使用桥接模式\n--graphics none：无图形界面，使用命令行安装\n--extra-args：传递给安装程序的额外参数，这里配置为使用串口控制台\n--disk：磁盘配置，这里创建一个40GB的QCOW2格式磁盘\n\n完整脚本\n\nvirt-install\n安装 Windows 10\n准备virt-install\n\n下载 Windows 10 ISO 和 VirtIO 驱动\n\n\nWindows 10 LTSC\n\n\nVirtIO 驱动\n\n\n\n安装\n\n注意\n安装时需要加载 VirtIO 驱动\n在安装过程中，当提示选择磁盘时，选择加载驱动程序，然后选择 VirtIO 驱动的w10目录\n安装完毕之后需要更新驱动\n\n打开设备管理器\n右键点击需要更新的设备，选择更新驱动程序\n选择浏览计算机以查找驱动程序软件\n选择D:\\（假设 VirtIO 驱动挂载在D盘）进行更新（根目录即可）\n\n取消virtio-win.iso的挂载\n执行以下命令取消挂载：\n注意如果虚拟机正在运行，需要添加--live参数\n\n网络配置\n前面提到 virbr0 是 libvirt 默认创建的桥接网络接口，允许虚拟机通过宿主机的网络连接到外部网络。它通常配置为 NAT 模式，这意味着虚拟机可以访问外部网络，但外部网络无法直接访问虚拟机。\n我们可以通过配置桥接网络来实现虚拟机与宿主机在同一局域网内通信。\n配置桥接网络\n配置宿主机桥接接口\nlibvirt 桥接网络需要宿主机上有一个桥接接口。这里以创建一个名为 virbr1 的桥接接口为例。\n编辑宿主机的网络配置文件，一般需要根据具体的网络管理工具进行配置，例如Netplan、NetworkManager或systemd-networkd。这里以systemd-networkd为例：\n创建一个新的网络设备/etc/systemd/network/20-bridge-br1.netdev：\n\n创建桥接接口配置文件/etc/systemd/network/30-bridge-br1.network：\n\n修改宿主机的物理网络接口配置文件，可能是/etc/systemd/network/89-ethernet.network，具体文件名根据实际情况而定：\n\n然后重启systemd-networkd服务：\n\n编辑libvirt网络配置文件\n新建一个桥接网络配置文件br1.xml，内容如下：\n\n\nname：网络名称，可以自定义\nuuid：网络的唯一标识符，可以使用uuidgen命令生成\nforward mode='bridge'：设置为桥接模式\nbridge name：桥接接口名称，需要与宿主机上的桥接接口名称一致\n\n定义并启动新网络\n\n配置虚拟机使用新网络\n在创建虚拟机时，使用--network bridge=virbr1,model=virtio参数指定使用新的桥接网络。\n或者直接修改已有虚拟机的网络配置：\n\n将网络部分修改为：\n\n保存并退出后，重启虚拟机使配置生效：\n\n"},{"url":"https://blog.101248.xyz/blog/kvm-pass-through/","title":"KVM 设备直通","description":"KVM 设备直通","body":"查看直通设备\n\n配置直通设备\n\nNote:\n\n--live 选项表示应用到正在运行的虚拟机\n\n"},{"url":"https://blog.101248.xyz/blog/dns/","title":"Linux DNS配置","description":"如何正确配置DNS","body":"本机DNS配置\n在Linux系统中，DNS配置主要通过/etc/resolv.conf文件进行管理。该文件包含了DNS服务器的地址和搜索域等信息。\n配置resolv.conf\nresolv.conf文件的基本格式如下：\n\n配置systemd-resolved\n主要配置文件位于/etc/systemd/resolved.conf，可以通过编辑该文件来配置DNS服务器。\n大致格式如下\n\n并且systemd-resolved会自动生成/etc/resolv.conf文件，用来接管系统的DNS解析功能。\n通过以下命令可以覆盖默认的resolv.conf文件：\n\n注意该文件以全局配置形式，类似于Fallback的方式。如果你的网络接口有单独的DNS配置（手动配置或通过DHCP获取），则优先于该文件。\n可以通过以下命令查看当前的DNS配置：\n\n类似于上面的输出，Current DNS Server表示当前使用的DNS服务器地址。\n具体问题\n外网局域网有自定义的DNS zone，即某些域名需要通过特定的DNS服务器解析,但是又想避免污染\n先在/etc/systemd/resolved.conf中添加你希望使用的DNS服务器：\n\n~.表示所有其他域名的请求会通过该DNS服务器进行解析。\n如果网络管理器为systemd-networkd，则在/etc/systemd/network/目录下WAN口的配置文件中添加以下内容：\n\n~表示该域名后缀的请求会通过该网络接口的DNS服务器进行解析。\n最后重启生效。\n自定义的DNS服务器希望使用DNS over TLS协议，但是局域网内的DNS服务器不支持DoT协议\n先时在/etc/systemd/resolved.conf中开启DoT协议：\n\nDNSOverTLS=yes表示全局的DNS请求会使用DoT协议。\n如果使用systemd-networkd，则在/etc/systemd/network/目录下WAN口的配置文件中添加以下内容：\n\nDNSOverTLS=no表示该网络接口的DNS请求不会使用DoT协议。\n如果使用NetworkManager，则可以通过nmcli命令配置：\n\n"},{"url":"https://blog.101248.xyz/blog/soft-router/","title":"Linux软路由配置","description":"如何使用Linux系统搭建软路由","body":"systemd-networkd + systemd-resolved\n本节参考Arch Manual。\n假设我们有两个网口enp1s0，enp2s0，enp1s0作为WAN口，enp2s0作为LAN口。\n多个LAN口可以通过桥接的方式来实现，具体配置方式根据网络管理器自行查阅。\n基本网络配置\n将以下配置写入/etc/systemd/network/10-enp1s0.network文件\n\n以上配置中MACAddress填写enp1s0的MAC地址。\n配置enp1s0通过DHCP获取ipv4地址，并且开启ip转发功能。\nipv6配置中开启IPv6AcceptRA，表示接受路由器通告。\n将以下配置写入/etc/systemd/network/20-enp2s0.network文件\n\n以上配置中MACAddress填写enp2s0的MAC地址。\n配置enp2s0开启DHCP服务，并且开启ip伪装功能。\nAddress配置enp2s0的ipv4地址为192.168.5.1/24。\nDHCPServer配置中DNS=_server_address表示将LAN口的地址作为DNS服务器地址，需配合DNS服务使用。\nipv6配置中配置ipv6地址为fd00:1::/64，并且开启IPv6SendRA，表示发送路由器通告。\n注意:如果以上配置不生效，检查net.ipv4.ip_forward和net.ipv6.conf.all.forwarding是否开启。具体配置方式自行查阅。\nNote - FAQ - systemd-networkd\nDNS配置\n将以下配置写入（修改至）/etc/systemd/resolved.conf文件\n\n开启DNSStubListenerExtra，并指定LAN口的地址。\n更多DNS配置请参考Note - DNS。\n启动服务\n\n其它搭配软件\nnetplan\n本节参考Netplan.io。\n注意netplan目前还不支持DHCPServer和IPMasquerade配置。\n可以通过netplan来配置网口\n\n如果选择systemd-networkd作为渲染器，则不要在/etc/systemd/network/目录下配置网口，否则将会覆盖netplan的配置。\n应用配置\n\ndnsmasq\n本节参考Arch Wiki - Dnsmasq。\ndnsmasq可以作为DNS和DHCP服务来使用。\n将以下配置写入/etc/dnsmasq.d/lan.conf文件\n\n注意这里dnsmasq没有配置自带的DNS服务。\n应用同时配置自动启动\n\nMasquerade配置\n如果不使用systemd-networkd的IPMasquerade功能，同样需要配置NAT转发功能。\n同时注意net.ipv4.ip_forward和net.ipv6.conf.all.forwarding需要开启。\n这里可以选择用iptables或者nftables来配置Masquerade。\n注意如果机器上同时配有其他使用iptables的服务如Docker和TailScale，则建议使用iptables,或者安装nftables但是用iptables的兼容模式。\niptables\n\n可以使用iptables-persistent来保存iptables规则\n\n应该在安装过程中选择保存当前规则。没有则查看是否有/etc/iptables/rules.v4和/etc/iptables/rules.v6文件，如果没有则手动保存\n\nnftables\n\n应用同时配置自动启动\n\n"},{"url":"https://blog.101248.xyz/blog/install-ofed/","title":"Ubuntu 安装OFED","description":"安装`OFED`","body":"Ubuntu18.04\n环境\n\nLinux np01 5.4.0-150-generic #167~18.04.1-Ubuntu SMP Wed May 24 00:51:42 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\nMLNX_OFED_SRC-debian-4.9-7.1.0.0.tgz\n\n安装步骤\n解压压缩包之后执行：\n\n遇到的问题\n解决办法整合\n\n一般情况下如果安装失败，会有以下内容\n\n查看log再加以搜索一般就可以解决，这里只列举我遇到的\n\"No module named 'distutils.core'\"\n\n解决办法：\n原帖，简单来说就是安装python3-distutils\n\n\"bison: not found\"\n\n解决办法：\n安装bison\n\n\"flex: not found\"\n\n解决办法：\n安装flex\n\nUbuntu22.04\n环境\n\nLinux np01 5.15.0-125-generic #135-Ubuntu SMP Fri Sep 27 13:53:58 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\nMLNX_OFED_SRC-debian-24.04-0.7.0.0.tgz\n\n安装步骤\n解压压缩包之后执行：\n\n"},{"url":"https://blog.101248.xyz/blog/niri/","title":"Niri","description":"安装和配置Niri","body":"环境\n在Arch Linux下使用Niri，并通过paru进行安装。\n\n安装\n首先安装paru，如果已经安装可以跳过这一步：\n\n然后使用paru安装Niri：\n\n配置\nNiri的配置文件位于~/.config/niri/config.kdl。\nFont\n安装中文与表情字体：\n\n然后运行以下命令更新字体缓存：\n\n退出Niri重启后，字体即可生效。\n输入法\n安装fcitx5-im和fcitx5-chinese-addons：\n注意：这里会让你选音频提供者，如果担心音频问题，可以选择pipewire。\n\n修改Niri的配置文件，添加以下内容：\n\nChrome\n安装Chrome浏览器：\n\n添加以下内容到~/.config/chrome-flags.conf文件中：\n\n\n启用硬件加速\n启用Wayland支持\n启用Wayland输入法支持\n使用Wayland文本输入版本3\n\n进阶\nDankMaterialShell\n本节参考GitHub - DankMaterialShell\n使用一些已经配置好的Niri环境，这里选择DankMaterialShell：\n安装软件包：\n\n修改Niri的配置文件，添加以下内容：\n\n注意：binds部分需要和已有的配置合并。\nDisplay Manager\n自动登录Niri，这里使用greetd或lemurs。\ngreetd\n本节参考DankMaterialShell - Greeter\ndms有对greetd的支持，直接执行以下命令：\n\n不支持的话，可以参考Arch Wiki - Greetd进行安装与配置。\nlemurs\n本节参考GitHub - lemurs\n总览\n\n安装\n\n配置\n创建/etc/lemurs/wayland/niri文件：\n\n启用lemurs服务：\n\n如果你已经有一个显示管理器在运行，可能需要先禁用它：\n\nFAQ\nNvidia驱动\n参考：Arch Wiki - NVIDIA\n笔记本自带音频设备不能识别\n安装sof-firmware与pipewire-pulse：\n\n"},{"url":"https://blog.101248.xyz/blog/ubuntu-change-kernel/","title":"更换Ubuntu内核","description":"更换Ubuntu内核，修改`grub`配置","body":"下载内核deb包\n这里可以找到指定的内核版本，下载对应的deb包。\n一般需要下载header和image两个包。\n我需要安装5.4.284-generic内核，需要下载四个包：\n\nlinux-headers-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\nlinux-headers-5.4.284-0504284_5.4.284-0504284.202409121056_all.deb\nlinux-modules-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\nlinux-image-unsigned-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\n\n安装deb包\n\n修改grub配置\n一般安装之后会默认作为启动内核，可以在开机时选择内核版本。\n如果希望开机时自动选用某个内核，可以修改/etc/default/grub文件。\n查看menuentry列表\n首先运行一下命令\n\n可以得到类似以下输出\n\n第一个menuentry就是默认启动的内核，编号为0。第二个为Advanced options，编号为1。可以看到有四个内核可供选择。编号为1&gt;0，1&gt;1，1&gt;2，1&gt;3。\n修改grub配置\n打开/etc/default/grub文件，找到GRUB_DEFAULT字段，修改为对应内核编号。如：\n\n以上表示默认启动第一个内核。\n更新grub\n执行以下命令\n\n安装额外模块（可选,建议）\n如果需要安装额外的内核模块，可以使用以下命令：\n\n"},{"url":"https://blog.101248.xyz/images/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/archive/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/archive/dv4cfg/","title":"Dv4cfg","description":"A simple CLI to use dv-api with toml/yaml/json","body":"手册\n配置\n基本属性\n名称必要性类型默认值描述待定\nid可选string用于区分不同的存档用于区分多个配置文件\nlocal可选local_device本地设备配置\nssh可选[ssh_device]ssh设备配置\ngroup可选[task_group]以组为单位执行任务\nauto可选[auto_task]用于自启动服务管理\ncopy可选[copy_task]用于拷贝文件\napp可选[app_task]用于本机应用管理（包管理）\nexec可选[exec_task]执行命令（脚本）\n\n设备配置\n每个设备由普通用户与超级用户组成，目前用户只有当前用户，与ssh用户两种。\n当前用户（local）配置如下\n名称必要性类型默认值描述待定\nuid可选stringthis用于区分用户，指代当前用户\nmount可选path~/.config/dvcopy_task中相对路径展开\n\nssh用户（ssh_user）配置如下\n名称必要性类型默认值描述待定\nuid必须string用于区分用户，指代ssh用户\nhost必须stringssh_config文件中的Host，用于查找ssh配置\npasswd可选stringssh用户密码\n\n本地设备配置（local_device）如下\n名称必要性类型默认值描述待定\nhid必须stringlocal用于区分设备，指代本机\nuser必须local本机用户配置\nsystem可选ssh_user本机超级用户（管理员）暂时复用ssh,未来可能写一个通用agent\n\nssh设备配置（ssh_device）如下\n名称必要性类型默认值描述待定\nhid必须string用于区分设备，指代远程设备\nos可选manjaro|alpine|...远程设备操作系统\nusers可选[ssh_user]远程用户配置\nsystem可选ssh_user远程设备超级用户（管理员）\n\n基本任务配置\n每个任务的基本属性（task_attr）如下\n名称必要性类型默认值描述待定\nid必须string用于区分任务\nnext可选[string]表明任务之间的拓扑关系\n\n目前任务之间只支持next关系，未来可能支持更多关系。\n任务目标（target）类型如下\n名称必要性类型默认值描述待定\nsrc_uid可选string操作来源\ndst_uid可选string操作目标\n\n自启动服务（auto_task）\n名称必要性类型默认值描述待定\nattr必须task_attr任务基本属性\nuid可选string目标用户\nname必须string任务名称\naction必须setup|reload执行的动作\n\n文件拷贝（copy_task）\n名称必要性类型默认值描述待定\nattr必须task_attr任务基本属性\ntarget可选target操作用户\npair必须[(string,string)]拷贝的文件\n\n软件管理（app_task）\n名称必要性类型默认值描述待定\nattr必须task_attr任务基本属性\nuid可选string目标用户\npkgs必须[string]安装的软件\n\n执行命令（exec_task）\n名称必要性类型默认值描述待定\nattr必须task_attr任务基本属性\nuid可选string目标用户\nshell可选string执行命令使用的shell\ncommand必须string执行的命令\n\n任务划分\n引用（cite）\n名称必要性类型默认值描述待定\nattr必须task_attr引用基本属性\ntarget可选target操作用户\n\n引用基本属性的id与被引用任务的id相同。可以引用任务组，也可以引用单个任务。target将会填充引用任务的target，dst_uid填充引用任务的uid。\n举例：\n{{&lt; code-toggle &gt;}}\napp:\nattr:\nid: 'task1'\npkgs:\n- \"fakeroot\"\ngroup:\nid: 'group1'\ncites:\n- attr:\nid: 'task1'\ntarget:\ndst_uid: 'this'\n{{&lt; /code-toggle &gt;}}\n将会替换为\n{{&lt; code-toggle &gt;}}\ngroup:\nid: 'group1'\napp:\nattr:\nid: 'task1'\nuid: 'this'\npkgs:\n- \"fakeroot\"\n{{&lt; /code-toggle &gt;}}\n任务分组（task_group）\n名称必要性类型默认值描述待定\nid必须string区分不同任务（组）\ntarget可选target目标用户\ncites可选[cite]引用的其他任务（组）\nauto可选[auto_task]用于自启动服务管理\ncopy可选[copy_task]用于拷贝文件\napp可选[app_task]用于本机应用管理（包管理）\nexec可选[exec_task]执行命令（脚本）\n\n分组的taget同上，逐级向下传递。\n命令行参数\n\n\n-d：用于读取配置文件（config.toml/yaml/json）与cache.db\n-c：用于指定配置文件路径，优先于指定目录下配置文件\n\n\nEXTENSION：可选，用于指定配置文件格式（toml/yaml/json）\n\n\nPLAN_ID：可选，用于指定执行的计划，目前支持任务组id\n-n：可选，用于测试执行计划，不会真正执行\n\n"},{"url":"https://blog.101248.xyz/faq/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/faq/cf/","title":"Redirects after Cloudflare Proxy","description":"Solve the problem of keeping redirects after cloudflare proxy","body":"Github Pages 启用了Enforce HTTPS后，Cloudflare代理后尝试使用HTTP访问Github Pages时，会触发重定向，然后又去访问Cloudflare，导致一直重定向。\n解决办法：将Cloudflare的SSL/TLS设置模式改为Full。\n \n"},{"url":"https://blog.101248.xyz/faq/git-rm-submodule/","title":"移除Git子模块","description":"如何移除`Git`仓库中的子模块","body":"原文: Stackoverflow\n\n"},{"url":"https://blog.101248.xyz/faq/systemd-networkd/","title":"systemd-networkd","description":"Some notes about systemd-networkd","body":"/etc/systemd/network 目录下配置文件未生效\n配置好网络之后重启systemd-networkd服务，发现网络并没有生效：\nnetworkctl status显示SETUP为unmanaged。\n解决方法：\n\n修改/etc/systemd/network/目录下的配置文件权限为644,参考\n\n"},{"url":"https://blog.101248.xyz/faq/gh/","title":"GitHub Pages FAQ","description":"Solve some common issues when using GitHub Pages","body":"Pemission denied\n \n解决办法\nSettings -&gt; Actions -&gt; General -&gt; Workflows permissions -&gt; Read and write permissions\nBrowser shows insecure content warning\n \n解决办法\n修改你使用框架的配置文件，改url为你自定义的域名，而不是github.io域名。\n"},{"url":"https://blog.101248.xyz/faq/lib-dep/","title":"Linux依赖FAQ","description":"一些`linux`下的库依赖问题","body":"动态库\n安装之后找不到\n问题：\n安装之后，运行时提示找不到动态库。\n解决：\n尝试刷新动态库缓存：\n\n"},{"url":"https://blog.101248.xyz/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/blog/dns/","title":"Linux DNS配置","description":"如何正确配置DNS","body":"本机DNS配置\n在Linux系统中，DNS配置主要通过/etc/resolv.conf文件进行管理。该文件包含了DNS服务器的地址和搜索域等信息。\n配置resolv.conf\nresolv.conf文件的基本格式如下：\n\n配置systemd-resolved\n主要配置文件位于/etc/systemd/resolved.conf，可以通过编辑该文件来配置DNS服务器。\n大致格式如下\n\n并且systemd-resolved会自动生成/etc/resolv.conf文件，用来接管系统的DNS解析功能。\n通过以下命令可以覆盖默认的resolv.conf文件：\n\n注意该文件以全局配置形式，类似于Fallback的方式。如果你的网络接口有单独的DNS配置（手动配置或通过DHCP获取），则优先于该文件。\n可以通过以下命令查看当前的DNS配置：\n\n类似于上面的输出，Current DNS Server表示当前使用的DNS服务器地址。\n具体问题\n外网局域网有自定义的DNS zone，即某些域名需要通过特定的DNS服务器解析,但是又想避免污染\n先在/etc/systemd/resolved.conf中添加你希望使用的DNS服务器：\n\n~.表示所有其他域名的请求会通过该DNS服务器进行解析。\n如果网络管理器为systemd-networkd，则在/etc/systemd/network/目录下WAN口的配置文件中添加以下内容：\n\n~表示该域名后缀的请求会通过该网络接口的DNS服务器进行解析。\n最后重启生效。\n自定义的DNS服务器希望使用DNS over TLS协议，但是局域网内的DNS服务器不支持DoT协议\n先时在/etc/systemd/resolved.conf中开启DoT协议：\n\nDNSOverTLS=yes表示全局的DNS请求会使用DoT协议。\n如果使用systemd-networkd，则在/etc/systemd/network/目录下WAN口的配置文件中添加以下内容：\n\nDNSOverTLS=no表示该网络接口的DNS请求不会使用DoT协议。\n如果使用NetworkManager，则可以通过nmcli命令配置：\n\n"},{"url":"https://blog.101248.xyz/faq/systemd-networkd/","title":"systemd-networkd","description":"Some notes about systemd-networkd","body":"/etc/systemd/network 目录下配置文件未生效\n配置好网络之后重启systemd-networkd服务，发现网络并没有生效：\nnetworkctl status显示SETUP为unmanaged。\n解决方法：\n\n修改/etc/systemd/network/目录下的配置文件权限为644,参考\n\n"},{"url":"https://blog.101248.xyz/blog/wildcard-domain-name/","title":"通配符域名证书","description":"ACME 从 Google Domains 获取通配符域名证书","body":"获取Google云服务的b64MacKey和KeyID\n获取Google云服务的b64MacKey和KeyID\n打开google云服务，选择API和服务\n \n点击右上角的Shell\n \n成功后输入以下命令\n\n得到b64MacKey和KeyID\n使用acme.sh申请证书\n安装acme.sh到～/.acme.sh\n\n注册账号\n\n由于域名托管在Cloudflare，所以需要添加环境变量\n首先在Cloudflare上拿到Global API Key\n \n在account.conf中添加\n\n申请证书\n\n可以设置默认证书的CA\n\n更新证书\n\n"},{"url":"https://blog.101248.xyz/blog/niri/","title":"Niri","description":"安装和配置Niri","body":"环境\n在Arch Linux下使用Niri，并通过paru进行安装。\n\n安装\n首先安装paru，如果已经安装可以跳过这一步：\n\n然后使用paru安装Niri：\n\n配置\nNiri的配置文件位于~/.config/niri/config.kdl。\nFont\n安装中文与表情字体：\n\n然后运行以下命令更新字体缓存：\n\n退出Niri重启后，字体即可生效。\n输入法\n安装fcitx5-im和fcitx5-chinese-addons：\n注意：这里会让你选音频提供者，如果担心音频问题，可以选择pipewire。\n\n修改Niri的配置文件，添加以下内容：\n\nChrome\n安装Chrome浏览器：\n\n添加以下内容到~/.config/chrome-flags.conf文件中：\n\n\n启用硬件加速\n启用Wayland支持\n启用Wayland输入法支持\n使用Wayland文本输入版本3\n\n进阶\nDankMaterialShell\n本节参考GitHub - DankMaterialShell\n使用一些已经配置好的Niri环境，这里选择DankMaterialShell：\n安装软件包：\n\n修改Niri的配置文件，添加以下内容：\n\n注意：binds部分需要和已有的配置合并。\nDisplay Manager\n自动登录Niri，这里使用greetd或lemurs。\ngreetd\n本节参考DankMaterialShell - Greeter\ndms有对greetd的支持，直接执行以下命令：\n\n不支持的话，可以参考Arch Wiki - Greetd进行安装与配置。\nlemurs\n本节参考GitHub - lemurs\n总览\n\n安装\n\n配置\n创建/etc/lemurs/wayland/niri文件：\n\n启用lemurs服务：\n\n如果你已经有一个显示管理器在运行，可能需要先禁用它：\n\nFAQ\nNvidia驱动\n参考：Arch Wiki - NVIDIA\n笔记本自带音频设备不能识别\n安装sof-firmware与pipewire-pulse：\n\n"},{"url":"https://blog.101248.xyz/blog/kvm-pass-through/","title":"KVM 设备直通","description":"KVM 设备直通","body":"查看直通设备\n\n配置直通设备\n\nNote:\n\n--live 选项表示应用到正在运行的虚拟机\n\n"},{"url":"https://blog.101248.xyz/blog/kvm/","title":"KVM","description":"KVM 安装 虚拟机 及相关配置","body":"相关\nvirbr0 桥接网络配置\nvirbr0 是 libvirt 默认创建的桥接网络接口，允许虚拟机通过宿主机的网络连接到外部网络。它通常配置为 NAT 模式，这意味着虚拟机可以访问外部网络，但外部网络无法直接访问虚拟机。\n配置文件位于 /etc/libvirt/qemu/networks/default.xml。\n环境\n检查CPU虚拟化支持\n\n输出大于0表示支持。\n安装相关软件包\nDebian/Ubuntu\n\nManjaro\n\n添加当前用户到 libvirt 和 kvm 组\n\n检查并启动 libvirtd 服务与默认网络\n\n安装Ubuntu虚拟机\n下载Ubuntu ISO\n\n国内镜像\n\n\n准备硬盘\n\n配置\n创建 user-data 文件：\n\n按实际情况修改 hostname、users 和 chpasswd。\n创建 meta-data 空文件\n\n生成 seed 文件\n\n创建虚拟机\n\n\n\n--name：虚拟机名称\n--os-variant：操作系统版本\n--vcpus：虚拟CPU数量\n--ram：内存大小（MB）\n--location：安装介质路径（ISO文件路径）\n--network：网络配置，这里使用桥接模式\n--graphics none：无图形界面，使用命令行安装\n--extra-args：传递给安装程序的额外参数，这里配置为使用串口控制台\n--disk：磁盘配置，这里创建一个40GB的QCOW2格式磁盘\n\n完整脚本\n\nvirt-install\n安装 Windows 10\n准备virt-install\n\n下载 Windows 10 ISO 和 VirtIO 驱动\n\n\nWindows 10 LTSC\n\n\nVirtIO 驱动\n\n\n\n安装\n\n注意\n安装时需要加载 VirtIO 驱动\n在安装过程中，当提示选择磁盘时，选择加载驱动程序，然后选择 VirtIO 驱动的w10目录\n安装完毕之后需要更新驱动\n\n打开设备管理器\n右键点击需要更新的设备，选择更新驱动程序\n选择浏览计算机以查找驱动程序软件\n选择D:\\（假设 VirtIO 驱动挂载在D盘）进行更新（根目录即可）\n\n取消virtio-win.iso的挂载\n执行以下命令取消挂载：\n注意如果虚拟机正在运行，需要添加--live参数\n\n网络配置\n前面提到 virbr0 是 libvirt 默认创建的桥接网络接口，允许虚拟机通过宿主机的网络连接到外部网络。它通常配置为 NAT 模式，这意味着虚拟机可以访问外部网络，但外部网络无法直接访问虚拟机。\n我们可以通过配置桥接网络来实现虚拟机与宿主机在同一局域网内通信。\n配置桥接网络\n配置宿主机桥接接口\nlibvirt 桥接网络需要宿主机上有一个桥接接口。这里以创建一个名为 virbr1 的桥接接口为例。\n编辑宿主机的网络配置文件，一般需要根据具体的网络管理工具进行配置，例如Netplan、NetworkManager或systemd-networkd。这里以systemd-networkd为例：\n创建一个新的网络设备/etc/systemd/network/20-bridge-br1.netdev：\n\n创建桥接接口配置文件/etc/systemd/network/30-bridge-br1.network：\n\n修改宿主机的物理网络接口配置文件，可能是/etc/systemd/network/89-ethernet.network，具体文件名根据实际情况而定：\n\n然后重启systemd-networkd服务：\n\n编辑libvirt网络配置文件\n新建一个桥接网络配置文件br1.xml，内容如下：\n\n\nname：网络名称，可以自定义\nuuid：网络的唯一标识符，可以使用uuidgen命令生成\nforward mode='bridge'：设置为桥接模式\nbridge name：桥接接口名称，需要与宿主机上的桥接接口名称一致\n\n定义并启动新网络\n\n配置虚拟机使用新网络\n在创建虚拟机时，使用--network bridge=virbr1,model=virtio参数指定使用新的桥接网络。\n或者直接修改已有虚拟机的网络配置：\n\n将网络部分修改为：\n\n保存并退出后，重启虚拟机使配置生效：\n\n"},{"url":"https://blog.101248.xyz/dv4lua/","title":"Dv4lua","description":"A simple CLI to use dv-api with lua","body":"介绍\n这个工具主要功能是用来方便的执行一系列操作，如：自动化任务、文件备份、应用管理、执行命令，配置文件管理等。\n由于自定义执行逻辑以配置文件的形式呈现过于复杂，本工具选择与Lua结合，以全局变量dv的形式提供API接口。\nNote:\n\n🚧：表示该功能尚未实现或存在问题\n\nAPI\nDv\nDv类是整个API的核心，包含了用户管理（um）、配置文件管理（dot）和包管理（pm）等功能模块。\n以下是Dv类的定义和成员变量：\n\nsync\nExample:\n\n路径首先会尝试使用variable与环境变量展开，格式为${var}，如果是相对路径，则还会尝试使用mount展开。\nconfirm为y（覆盖），d（删除），u（更新,新增），n`（不变）组成的字符串。\n对于目录会扫描目录下的所有文件,复制文件行为规则如下：\nCheck\n根据源文件与目标文件状态，检查可执行操作的类型。\nsrcdstactiondescription\n*noney直接覆盖文件\nnone*d直接删除文件\nnone*u下载文件\nnewoldy可以覆盖文件或者不变\noldnewu可以更新文件或者不变\noldoldn不变\nnewnewyu可以覆盖文件，更新或者不变\n\nMatch\n根据confirm参数，按顺序匹配可执行操作的类型。\nExample:\nactionconfirmresult\nyyy\nyuyy\nynn\nynyn\nuy\nyuy\n\n如果可以确定result则执行result操作，否则进入交互模式。\ndl\nExample:\n\njson\nExample:\n\num, dot, pm\nExample:\n\nUM\nUM类提供了用户管理的功能，实际数据存储在Dv类中。\n以下是UM类的定义和成员函数：\n\ncfg参数为用户配置表，可以任意添加字段。可以影响dv的行为字段如下：\nnamevaluedescription\nhidany string用户所在的主机标识符，cur用户会自动设置为local\nmountany string用户的挂载目录，影响文件操作的路径解析\noslinux/windows/macos/unix/ubuntu/...用户的操作系统，影响包管理器，变量加载，等等\n\nExample:\n\nNote:\n\n即便设置了os，dv仍然会尝试探测用户的操作系统，并在必要时覆盖该值。目前ssh用户的操作系统探测只支持linux（且需要先设置os为linux），其他操作系统的探测为TODO状态。\n\nDot\nDot类提供了配置文件的管理功能，主要用于加载配置文件、备份配置文件等。\n注意所有配置文件相关数据均存储在此类中。\n以下是Dot类的定义和成员函数：\n\nconfirm方法用于配置复制文件时的默认方式，参见Op\nSchema格式举例如下：\n\nname为配置文件的名称，paths中每一项为一个配置文件的所有可能路径。\n对于以上配置文件，解析如下：\n\nfish配置文件在linux下的配置文件default路径为~/.config/fish\nalacritty配置文件在windows下的配置文件default路径为${APPDATA}/alacritty/alacritty.toml，注意${APPDATA}将会被展开\nalacritty配置文件在unix下的配置文件default路径有四个可能的路径\nfcitx5配置文件在linux下的配置文件data路径为~/.local/share/fcitx5，default路径为~/.config/fcitx5\n\nadd_schema方法用于添加配置文件的schema\n支持加载方式\n\nuid + path：加载指定用户的配置文件，path为配置文件的路径。\n\nSource格式与Schema相同，举例如下：\n\nadd_source方法用于添加配置文件的源，目前只支持以uid和path为参数加载配置文件。\n默认会加载path目录下config.toml文件作为配置文件，所有paths会被以path为前缀进行拼接。\nsync方法用于同步配置文件到指定用户，apps参数为一个列表，每个元素为一个配置文件的名称，uid参数为用户的id。\nupload方法用于上传指定用户配置文件到source，apps参数为一个列表，每个元素为一个配置文件的名称，uid参数为用户的id。\nExample:\n\nPm\nPm类提供了一些包管理器的功能，主要用于安装、更新软件包，实际并没有存储任何数据。\n以下是Pm类的定义和成员函数：\n\ninstall方法用于安装软件包，pkg参数为软件包名称（可以是多个软件包，用空格分隔），yes参数为是否自动确认安装。\n对包管理器的支持如下：\n\napt（Debian/Ubuntu）\napk（Alpine）\nyay（Arch Based Linux）\ndnf（Fedora）🚧\npacman（Arch Based Linux）\nparu（Arch Based Linux）\nwinget（Windows）🚧\n\nNote：注意需要的是设备hid，而不是用户的uid。\nExample:\n\nCLI\ndv4lua命令行工具的使用方法如下：\n\n"},{"url":"https://blog.101248.xyz/faq/lib-dep/","title":"Linux依赖FAQ","description":"一些`linux`下的库依赖问题","body":"动态库\n安装之后找不到\n问题：\n安装之后，运行时提示找不到动态库。\n解决：\n尝试刷新动态库缓存：\n\n"},{"url":"https://blog.101248.xyz/blog/install-ofed/","title":"Ubuntu 安装OFED","description":"安装`OFED`","body":"Ubuntu18.04\n环境\n\nLinux np01 5.4.0-150-generic #167~18.04.1-Ubuntu SMP Wed May 24 00:51:42 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\nMLNX_OFED_SRC-debian-4.9-7.1.0.0.tgz\n\n安装步骤\n解压压缩包之后执行：\n\n遇到的问题\n解决办法整合\n\n一般情况下如果安装失败，会有以下内容\n\n查看log再加以搜索一般就可以解决，这里只列举我遇到的\n\"No module named 'distutils.core'\"\n\n解决办法：\n原帖，简单来说就是安装python3-distutils\n\n\"bison: not found\"\n\n解决办法：\n安装bison\n\n\"flex: not found\"\n\n解决办法：\n安装flex\n\nUbuntu22.04\n环境\n\nLinux np01 5.15.0-125-generic #135-Ubuntu SMP Fri Sep 27 13:53:58 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\nMLNX_OFED_SRC-debian-24.04-0.7.0.0.tgz\n\n安装步骤\n解压压缩包之后执行：\n\n"},{"url":"https://blog.101248.xyz/blog/ubuntu-change-kernel/","title":"更换Ubuntu内核","description":"更换Ubuntu内核，修改`grub`配置","body":"下载内核deb包\n这里可以找到指定的内核版本，下载对应的deb包。\n一般需要下载header和image两个包。\n我需要安装5.4.284-generic内核，需要下载四个包：\n\nlinux-headers-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\nlinux-headers-5.4.284-0504284_5.4.284-0504284.202409121056_all.deb\nlinux-modules-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\nlinux-image-unsigned-5.4.284-0504284-generic_5.4.284-0504284.202409121056_amd64.deb\n\n安装deb包\n\n修改grub配置\n一般安装之后会默认作为启动内核，可以在开机时选择内核版本。\n如果希望开机时自动选用某个内核，可以修改/etc/default/grub文件。\n查看menuentry列表\n首先运行一下命令\n\n可以得到类似以下输出\n\n第一个menuentry就是默认启动的内核，编号为0。第二个为Advanced options，编号为1。可以看到有四个内核可供选择。编号为1&gt;0，1&gt;1，1&gt;2，1&gt;3。\n修改grub配置\n打开/etc/default/grub文件，找到GRUB_DEFAULT字段，修改为对应内核编号。如：\n\n以上表示默认启动第一个内核。\n更新grub\n执行以下命令\n\n安装额外模块（可选,建议）\n如果需要安装额外的内核模块，可以使用以下命令：\n\n"},{"url":"https://blog.101248.xyz/dv4rune/","title":"Dv4rune","description":"A simple CLI to use dv-api with rune","body":"介绍\n这个工具主要功能是用来方便的执行一系列操作，如：自动化任务、文件拷贝、应用管理、执行命令等。\n由于自定义执行逻辑以配置文件的形式呈现过于复杂，本工具选择与Rune结合，以Module形式嵌入，可以在Rune代码中直接调用dv-api的功能。\nAPI\n外部类型\ntypedescription\nConfig用户配置\nOs操作系统\nPackages包\nDvAPI\n\nConfig\n成员函数\nsigdescription\nfn cur() -&gt; Config创建当前用户的Config，默认设置HID为local，MOUNT为~/.local/share/dv，OS为linux\nfn ssh(host: &amp;str) -&gt; Config创建ssh用户的Config，默认设置HOST为host参数，MOUNT为~/.local/share/dv，OS为linux\nfn index_set(&amp;mut self, key: &amp;str, value: &amp;str)设置Config的成员变量\n\n成员变量\nnametypedescription\nis_systemOption&lt;bool&gt;设置用户是否为系统用户，如果不设置则当前用户自行探测，ssh目前为为TODO状态\n\nExample:\n\nOs\n成员函数\nsigdescription\nfn compat(&amp;self, oth: &amp;str) -&gt; bool判断Os是否兼容于oth,如linux兼容于unix\nfn as_str(&amp;self) -&gt; String将Os转换为字符串\n\nExample:\n\nPackages\n成员函数\nsigdescription\nfn new() -&gt; Packages创建一个新的Packages\nfn add_assign(&amp;mut self, pkg: &amp;Packages)合并另一个Packages\nfn index_set(&amp;mut self, key: &amp;str, value: &amp;str)设置包管理器对应的包\n\nExample:\n\nDv\n成员函数\nsigdescriptionlink\nasync fn add_user(id: &amp;str, user: Config) -&gt; Result&lt;(), Error&gt;添加用户link\nasync fn auto(id: &amp;str, service: &amp;str, action: &amp;str, args: Option&lt;&amp;str&gt;) -&gt; Result&lt;bool, Error&gt;自动化任务link\nasync fn copy(id: &amp;str, src:(&amp;str, &amp;str), dst:(&amp;str, &amp;str), confirm: Option&lt;&amp;str&gt;) -&gt; Result&lt;bool, Error&gt;拷贝文件link\nasync fn exec(id: &amp;str, shell: Option&lt;&amp;str&gt;, cmd: &amp;str) -&gt; Result&lt;bool, Error&gt;执行命令link\nload_src(id: &amp;str, path: &amp;str) -&gt; Result&lt;Vec, Error&gt;加载源文件link\nasync fn once(id: &amp;str, tid: &amp;str, f: fn() -&gt; Future&lt;Result&lt;(),Error&gt;&gt;) -&gt; Result&lt;bool, Error&gt;执行一次link\nfn os(id: &amp;str) -&gt; Result&lt;Os, Error&gt;获取用户的操作系统link\nasync fn pm(id: &amp;str, pkg: Package) -&gt; Result&lt;bool, Error&gt;包安装器link\nasync fn refresh(id: &amp;str, key: &amp;str) -&gt; Result&lt;(), Error&gt;刷新某些内置的机制link\n\nadd_user\n添加一个用户，用户的配置可以是当前用户或ssh用户。\nExample:\n\nauto\n对指定的服务执行指定的动作，动作可以是setup，reload，destroy。\n平台支持：\n\n\ncurrent\n\n\nlinux: 使用systemd作为后端实现\nactiondescription\nsetup理解为enable\nreload理解为reload_or_restart\ndestroy理解为disable\n\n\n\nwindows: 使用system service作为后端实现（实验）\nactiondescription\nsetup理解为install enable start\nreload理解为stop start\ndestroy理解为stop uninstall\n\n\n\nmacos: TODO\n\n\n\n\nssh\n\n\nlinux: 使用systemd作为后端实现（systemctl）\nactiondescription\nsetup理解为enable\nreload理解为reload_or_restart\ndestroy理解为disable\n\n\n\nwindows: TODO\n\n\nmacos: TODO\n\n\n\n\nExample:\n\ncopy\ncopy文件到指定的用户，confirm参数可以是y，u，n，分别表示覆盖，更新，不变。如果不指定confirm参数，则运行时会询问用户。\n路径规则\n\n~会展开为用户的home目录\n尝试使用variable与环境变量展开，格式为${var}\n相对路径会尝试使用MOUNT展开\n格式如下：\n\nsrcdstactiondescription\na/b/a/* -&gt; b/*拷贝目录下所有文件到目标目录\na/ba/* -&gt; b/*拷贝目录下所有文件到目标目录\nab/a -&gt; b/a拷贝目录/文件到目标目录\naba -&gt; b拷贝目录（文件）到目标路径\n\n注意：实际上是通过两个文件的mtime来判断文件是否需要更新\n\n源文件mtime变化则尝试覆盖\n目标文件mtime变化则尝试更新\n\nexec\n执行命令或脚本，shell参数可以是None或shell的路径，如果shell为None，则直接执行命令，如果shell不为None，则将命令作为脚本传入shell执行。\nExample:\n\nload_src\n加载源文件，返回一个Vec，每个元素为一个String，表示源文件的内容。\nonce\n确保某个函数只执行一次，tid参数为任务的id，f参数为函数指针，函数指针的返回值为Future&lt;Result&lt;(),Error&gt;&gt;类型。\nExample:\n\nos\n获得用户的操作系统，返回一个Os类型的对象，包含了操作系统的名称。\nExample:\n\npm\n安装某个包，pkg参数为一个Packages类型的对象，表示要安装的包。\nExample:\n\nrefresh\n刷新某些内置的机制，key参数为要刷新的键值。如果key为空，则会刷新所有的键值。\nkeydescription\npath则会删除对应的path的mtime记录\nonce_id则会删除对应的once_id的记录\n\n使用\ncli命令行工具的使用方法如下：\n\n相关文件\nfiledescription\n.cache缓存文件，默认路径为$directory/.cache，可通过-b指定\nconfig.rn配置文件，默认路径为$directory/config.rn，可通过-c指定\n__build.rn单独运行的rune文件，路径为$directory/__build.rn\n\nExample:\n\n\n\n路线图\n执行脚本\n\n\n\n执行命令\n\n\n\n执行内嵌脚本\n\n\n\n指定脚本文件\n\n\n文件操作\n\n\n\n拷贝文件\n\n\n\n拷贝目录\n\n\n\n修改文件\n\n\n服务管理\n\n\n\nlinux服务管理\n\n\n\nwindows服务管理\n\n\n\n更多后端支持\n\n\n应用（包）管理\nplatform支持：\n\n\napt\n\npacman\n\nyay\n\nparu\n\n基础操作\n\n\n安装\n\n卸载等其他操作\n\n"},{"url":"https://blog.101248.xyz/blog/soft-router/","title":"Linux软路由配置","description":"如何使用Linux系统搭建软路由","body":"systemd-networkd + systemd-resolved\n本节参考Arch Manual。\n假设我们有两个网口enp1s0，enp2s0，enp1s0作为WAN口，enp2s0作为LAN口。\n多个LAN口可以通过桥接的方式来实现，具体配置方式根据网络管理器自行查阅。\n基本网络配置\n将以下配置写入/etc/systemd/network/10-enp1s0.network文件\n\n以上配置中MACAddress填写enp1s0的MAC地址。\n配置enp1s0通过DHCP获取ipv4地址，并且开启ip转发功能。\nipv6配置中开启IPv6AcceptRA，表示接受路由器通告。\n将以下配置写入/etc/systemd/network/20-enp2s0.network文件\n\n以上配置中MACAddress填写enp2s0的MAC地址。\n配置enp2s0开启DHCP服务，并且开启ip伪装功能。\nAddress配置enp2s0的ipv4地址为192.168.5.1/24。\nDHCPServer配置中DNS=_server_address表示将LAN口的地址作为DNS服务器地址，需配合DNS服务使用。\nipv6配置中配置ipv6地址为fd00:1::/64，并且开启IPv6SendRA，表示发送路由器通告。\n注意:如果以上配置不生效，检查net.ipv4.ip_forward和net.ipv6.conf.all.forwarding是否开启。具体配置方式自行查阅。\nNote - FAQ - systemd-networkd\nDNS配置\n将以下配置写入（修改至）/etc/systemd/resolved.conf文件\n\n开启DNSStubListenerExtra，并指定LAN口的地址。\n更多DNS配置请参考Note - DNS。\n启动服务\n\n其它搭配软件\nnetplan\n本节参考Netplan.io。\n注意netplan目前还不支持DHCPServer和IPMasquerade配置。\n可以通过netplan来配置网口\n\n如果选择systemd-networkd作为渲染器，则不要在/etc/systemd/network/目录下配置网口，否则将会覆盖netplan的配置。\n应用配置\n\ndnsmasq\n本节参考Arch Wiki - Dnsmasq。\ndnsmasq可以作为DNS和DHCP服务来使用。\n将以下配置写入/etc/dnsmasq.d/lan.conf文件\n\n注意这里dnsmasq没有配置自带的DNS服务。\n应用同时配置自动启动\n\nMasquerade配置\n如果不使用systemd-networkd的IPMasquerade功能，同样需要配置NAT转发功能。\n同时注意net.ipv4.ip_forward和net.ipv6.conf.all.forwarding需要开启。\n这里可以选择用iptables或者nftables来配置Masquerade。\n注意如果机器上同时配有其他使用iptables的服务如Docker和TailScale，则建议使用iptables,或者安装nftables但是用iptables的兼容模式。\niptables\n\n可以使用iptables-persistent来保存iptables规则\n\n应该在安装过程中选择保存当前规则。没有则查看是否有/etc/iptables/rules.v4和/etc/iptables/rules.v6文件，如果没有则手动保存\n\nnftables\n\n应用同时配置自动启动\n\n"},{"url":"https://blog.101248.xyz/faq/git-rm-submodule/","title":"移除Git子模块","description":"如何移除`Git`仓库中的子模块","body":"原文: Stackoverflow\n\n"},{"url":"https://blog.101248.xyz/faq/cf/","title":"Redirects after Cloudflare Proxy","description":"Solve the problem of keeping redirects after cloudflare proxy","body":"Github Pages 启用了Enforce HTTPS后，Cloudflare代理后尝试使用HTTP访问Github Pages时，会触发重定向，然后又去访问Cloudflare，导致一直重定向。\n解决办法：将Cloudflare的SSL/TLS设置模式改为Full。\n \n"},{"url":"https://blog.101248.xyz/faq/gh/","title":"GitHub Pages FAQ","description":"Solve some common issues when using GitHub Pages","body":"Pemission denied\n \n解决办法\nSettings -&gt; Actions -&gt; General -&gt; Workflows permissions -&gt; Read and write permissions\nBrowser shows insecure content warning\n \n解决办法\n修改你使用框架的配置文件，改url为你自定义的域名，而不是github.io域名。\n"},{"url":"https://blog.101248.xyz/pages/","title":"","description":"","body":""},{"url":"https://blog.101248.xyz/about/","title":"About","description":"","body":"This site hosts some articles powered by the Zola static site generator and the abridge theme.\nThe articles are written by HaiXin Pang.\nThese articles are licensed under the CC BY-NC-SA 4.0 license.\n"},{"url":"https://blog.101248.xyz/privacy/","title":"Privacy Policy","description":"This page outlines the Privacy Policy for this site, and the date at which this policy was put into affect.","body":"Privacy\n\nThis site does not set or use cookies.\nThis site does not store data in the browser to be shared, sent, or sold to third-parties.\nNo personal information is shared, sent, or sold to third-parties.\n\nEffective Date: 1st Jan 2022\n"},{"url":"https://blog.101248.xyz/contact/","title":"Contact","description":"To reach us please use the contact form on this page.","body":"Want to get in touch? Fill out the form below to send me a message and I will get back to you as soon as possible!\n\n  \n    Name\n    \n  \n  \n    Email Address\n    \n  \n  \n    Message\n    \n  \n  \n  \n    Send\n  \n\n"},{"url":"https://blog.101248.xyz/offline/","title":"Offline Mode","description":"","body":"Offline Mode\nSorry, no cache found and it looks like you’re offline, a connection is required.\n"}]